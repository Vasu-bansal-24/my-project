
DESCRIPTION OF EXPERIMENT 17:






A. LOGIN ROUTE (JWT Token Generation):


app.post('/login', (req, res) => {
  const { username, password } = req.body;
  if (username === user.username && password === user.password) {
    const token = jwt.sign({ username }, SECRET_KEY, { expiresIn: '1h' });
    res.json({ message: 'Login successful', token });
  } else {
    res.status(401).json({ message: 'Invalid credentials' });
  }
});


EXPLANATION:

Handles user authentication and token generation.

Username/password are hardcoded: admin / password123.

Generates a JWT token using jwt.sign() with 1-hour expiration.

Returns the token to the client for future authenticated requests.

Invalid credentials return a 401 error.






B. AUTHENTICATION MIDDLEWARE (Token Verification):


function authenticateToken(req, res, next) {
  const authHeader = req.headers['authorization'];
  if (!authHeader) return res.status(401).json({ message: 'Token missing' });

  const token = authHeader.split(' ')[1];
  jwt.verify(token, SECRET_KEY, (err, userData) => {
    if (err) return res.status(403).json({ message: 'Invalid or expired token' });
    req.user = userData;
    next();
  });
}


EXPLANATION:

Checks for a JWT token in Authorization: Bearer <token> header.

Returns 401 if token is missing.

Uses jwt.verify() to validate the token.

Returns 403 if token is invalid or expired.

Valid token allows the request to proceed.





C. VIEW BALANCE ROUTE:

app.get('/balance', authenticateToken, (req, res) => {
  res.json({ balance: account.balance });
});


EXPLANATION:

Protected by authenticateToken.

Returns current account balance for authenticated users only.

Denies access if token is missing or invalid.




D. DEPOSIT MONEY ROUTE:

app.post('/deposit', authenticateToken, (req, res) => {
  const { amount } = req.body;
  if (!amount || amount <= 0) return res.status(400).json({ message: 'Invalid deposit amount' });
  account.balance += amount;
  res.json({ message: 'Deposit successful', newBalance: account.balance });
});


EXPLANATION:

Allows authenticated users to deposit money.

Validates the amount (>0).

Adds the amount to the balance and returns success message.

Invalid amounts return 400 Bad Request.




E. WITHDRAW MONEY ROUTE:


app.post('/withdraw', authenticateToken, (req, res) => {
  const { amount } = req.body;
  if (!amount || amount <= 0) return res.status(400).json({ message: 'Invalid withdrawal amount' });
  if (amount > account.balance) return res.status(400).json({ message: 'Insufficient balance' });
  account.balance -= amount;
  res.json({ message: 'Withdrawal successful', newBalance: account.balance });
});


EXPLANATION:

Allows authenticated users to withdraw money.

Validates positive amount and sufficient balance.

Deducts from balance and returns new balance.

Returns error if amount is invalid or insufficient.
