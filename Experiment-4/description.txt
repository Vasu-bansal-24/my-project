Live Counter Project: Test Cases & Validation Breakdown

Key Features & Functionality
This project is a simple, live character counter. It displays the number of characters typed into a text area in real-time.

HTML Structure & Components

- Page Title: The title of the web page is "Live Counter".
- Body: The main content of the page is within the <body> tag.
    - Heading: There's an <h2> element with the text "Live Character Counter". This acts as the main title for the tool.
    - Text Area: A <textarea> element is where you can type. It has an ID of "box" and a placeholder that says "Start typing...". The oninput attribute is the key here; it's what makes the counter update live.
    - Counter Display: A <p> tag is used to show the character count. Inside it, a <span> with the ID "count" holds the actual number. It starts at 0.

CSS Styling

- Body: The <body> element has a basic style.
    - font-family: sans-serif;: Sets the font to a clean, readable sans-serif font.
    - padding: 20px;: Adds 20 pixels of space all around the content.
- Text Area: The <textarea> element has a few styles to make it look good.
    - width: 100%;: Makes the text area take up the full width of its container.
    - height: 100px;: Sets its height to 100 pixels.
    - padding: 5px;: Gives it a bit of internal space so the text isn't right against the edge.

Validation & Test Cases

- Input Field: The text area itself.
    - Requirement: Count the number of characters as you type.
    - Valid Test Cases:
        - Typing "hello world" should show a count of 11.
        - Typing "123" should show a count of 3.
        - Typing special characters like "!@#" should show a count of 3.
        - Typing nothing should show a count of 0, which it already does by default.
    - Invalid Test Cases: N/A, as any input is valid and will simply be counted.

Learnings
1. How to use JavaScript directly within HTML using the oninput event.
2. How to get the value of an input field (this.value) and its length (this.value.length).
3. How to update an HTML element's content (textContent) dynamically.
4. How to create a simple, functional web tool with just HTML and a little CSS.
5. How to create a live, reactive user interface without needing a separate JavaScript file.
