NODE.JS TICKET BOOKING SYSTEM - SEAT RESERVATION API

WHAT THIS DOES:
A web server built with Node.js and Express that manages seat reservations for ticket booking. Users can view seats, lock them temporarily, and confirm bookings with automatic lock expiration.

EXPRESS TICKET SERVER CODE:

const express = require('express');
const bodyParser = require('body-parser');

const app = express();
app.use(bodyParser.json());

const seats = [
    { id: 1, status: 'available', lockedBy: null, lockExpiresAt: null },
    { id: 2, status: 'available', lockedBy: null, lockExpiresAt: null },
    { id: 3, status: 'available', lockedBy: null, lockExpiresAt: null },
    { id: 4, status: 'available', lockedBy: null, lockExpiresAt: null },
    { id: 5, status: 'available', lockedBy: null, lockExpiresAt: null }
];

function cleanExpiredLocks() {
    const now = Date.now();
    seats.forEach(seat => {
        if (seat.status === 'locked' && seat.lockExpiresAt <= now) {
            seat.status = 'available';
            seat.lockedBy = null;
            seat.lockExpiresAt = null;
        }
    });
}

app.get('/seats', (req, res) => {
    cleanExpiredLocks();
    res.json(seats);
});

app.post('/lock', (req, res) => {
    const { seatId, userId } = req.body;
    cleanExpiredLocks();
    
    const seat = seats.find(s => s.id === seatId);
    if (!seat) return res.status(404).json({ message: 'Seat not found' });
    
    if (seat.status === 'booked') return res.status(400).json({ message: 'Seat already booked' });
    if (seat.status === 'locked') return res.status(400).json({ message: 'Seat already locked' });
    
    seat.status = 'locked';
    seat.lockedBy = userId;
    seat.lockExpiresAt = Date.now() + 60000;
    
    res.json({ message: `Seat ${seatId} locked for user ${userId}` });
});

app.post('/confirm', (req, res) => {
    const { seatId, userId } = req.body;
    
    const seat = seats.find(s => s.id === seatId);
    if (seat.status !== 'locked') return res.status(400).json({ message: 'Seat is not locked' });
    if (seat.lockedBy !== userId) return res.status(403).json({ message: 'You did not lock this seat' });
    
    seat.status = 'booked';
    seat.lockExpiresAt = null;
    
    res.json({ message: `Seat ${seatId} successfully booked by user ${userId}` });
});

Explanation:
bodyParser.json() → Middleware to parse JSON request bodies
seats array → In-memory storage for seat data with status tracking
Date.now() → Gets current timestamp in milliseconds
forEach() → Loops through all seats to clean expired locks
find() → Searches for specific seat by ID
return res.status() → Sends HTTP error responses with status codes
lockExpiresAt → Timestamp when seat lock expires (1 minute)

SEAT BOOKING WORKFLOW:
1. GET /seats → View all available seats
2. POST /lock → Lock a seat for 1 minute
3. POST /confirm → Confirm booking within lock time

Seat Status Types:
- available → Seat can be locked
- locked → Seat temporarily reserved (1 minute)
- booked → Seat permanently reserved

API ENDPOINTS:
GET /seats → Returns all seats with current status
POST /lock → Locks seat with { seatId: 1, userId: "user123" }
POST /confirm → Confirms booking with { seatId: 1, userId: "user123" }

HTTP Status Codes:
200 → Success
400 → Bad request (seat unavailable)
403 → Forbidden (wrong user trying to confirm)
404 → Seat not found

TESTING THE API:
Start server: node ticket.js
View seats: GET http://localhost:3000/seats
Lock seat: POST { "seatId": 1, "userId": "john" }
Confirm booking: POST { "seatId": 1, "userId": "john" }

IMPORTANT CONCEPTS:
- Temporary Locks → Time-based reservation system
- Data Validation → Checking seat status and user permissions
- Automatic Cleanup → Expired locks become available again
- State Management → Tracking seat availability in real-time
- Business Logic → Rules for seat booking workflow

WHAT I LEARNED:
1. How to implement temporary reservation systems with time expiration
2. How to manage different states (available, locked, booked) in applications
3. How to validate user permissions and data before processing requests
4. How to use timestamps for automatic cleanup of expired data
5. How to create complex business logic with multiple API endpoints