NODE.JS EXPRESS REST API - CARD MANAGEMENT SERVER

WHAT THIS DOES:
A web server built with Node.js and Express that provides REST API endpoints to manage playing cards. Users can add, get, and delete cards through HTTP requests.

EXPRESS SERVER CODE:

const express = require("express");
const app = express();
const PORT = 3000;

app.use(express.json());

let cards = [];
let idCounter = 1;

app.get("/cards", (req, res) => {
  res.json(cards);
});

app.post("/cards", (req, res) => {
  const { suit, value } = req.body;
  if (!suit || !value) {
    return res.status(400).json({ message: "Suit and value are required" });
  }
  const newCard = { id: idCounter++, suit, value };
  cards.push(newCard);
  res.status(201).json(newCard);
});

app.delete("/cards/:id", (req, res) => {
  const index = cards.findIndex((c) => c.id === parseInt(req.params.id));
  if (index === -1) {
    return res.status(404).json({ message: "Card not found" });
  }
  const removed = cards.splice(index, 1);
  res.json({ message: "Card deleted", card: removed[0] });
});

app.listen(PORT, () => {
  console.log(`Server running on http://localhost:${PORT}`);
});

Explanation:
require("express") → Imports Express.js web framework
app = express() → Creates new Express application
app.use(express.json()) → Middleware to parse JSON requests
app.get() → Handles GET requests (retrieve data)
app.post() → Handles POST requests (create data)
app.delete() → Handles DELETE requests (remove data)
res.json() → Sends JSON response back to client
req.params.id → Gets ID from URL parameters
req.body → Gets data sent in request body

REST API ENDPOINTS:
GET /cards → Returns all cards
GET /cards/:id → Returns specific card by ID
POST /cards → Creates new card with suit and value
DELETE /cards/:id → Removes card by ID

HTTP Status Codes:
200 → Success (OK)
201 → Created successfully
400 → Bad request (missing data)
404 → Not found

TESTING THE API:
Start server: node server.js
GET all cards: http://localhost:3000/cards
POST new card: Send JSON { "suit": "Hearts", "value": "Ace" }
DELETE card: http://localhost:3000/cards/1

IMPORTANT EXPRESS CONCEPTS:
- Routes → URL patterns that trigger specific functions
- Middleware → Code that runs between request and response
- HTTP Methods → GET, POST, DELETE for different operations
- JSON → JavaScript Object Notation for data exchange
- REST API → Standard way to organize web service endpoints

WHAT I LEARNED:
1. How to create web servers using Express.js framework
2. How to handle different HTTP methods (GET, POST, DELETE)
3. How to work with JSON data in web requests and responses
4. How to create REST API endpoints for CRUD operations
5. How to use middleware and handle HTTP status codes